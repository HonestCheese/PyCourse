import random
import money

db = money.PlayerDatabase()

class Crash:
    @staticmethod
    def crash(money, stavka, user):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        ranges = [   
            (0.00, 0.00),   
            (1.00, 2.00),
            (2.01, 3.50),
            (3.51, 5.00),
            (5.01, 10.00),
            (10.01, 25.00),
            (25.01, 50.00),
            (50.01, 250.00),
            (250.01, 500.00),
            (500.01, 1000.00)
        ]
        
        probabilities = [1,60, 15, 10, 2, 2, 2, 1, 1, 1]

        probabilities = [p / 100 for p in probabilities]

        cumulative_probabilities = []
        cumulative_sum = 0
        for p in probabilities:
            cumulative_sum += p
            cumulative_probabilities.append(cumulative_sum)
        
        def simulate_x():
            rnd = random.random()
            for i, cumulative_probability in enumerate(cumulative_probabilities):
                if rnd <= cumulative_probability:
                    selected_range = ranges[i]
                    return random.uniform(*selected_range)
            # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–Ω—ã
        if money < 1:
            return "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö 1 üí≤"
        if db.get_balance_info(user) >= money:
            x = simulate_x()
            if x is not None:
                # –í–∞—à –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ x >= stavka

                if x >= stavka:
                    m = money*stavka
                    db.add_balance(user,(m-money))
                    return f"‚úÖ–í–ê–®–ê –°–¢–ê–í–ö–ê –£–î–ê–ß–ù–ê–Ø‚úÖ\n‚úÖ–°—Ç–∞–≤–∫–∞ - {money} üí≤ - x{stavka:.2f}‚úÖ\n–õ–ï–¢–ï–õ–û –î–ûüöÄ : {x:.2f}\n–í–´–ò–ì–†–´–® : {m} üí≤"
                else:
                    db.perform_transaction(user, money)
                    return f"‚ùå–í–ê–®–ê –°–¢–ê–í–ö–ê –ù–ï–£–î–ê–ß–ù–ê–Ø‚ùå\n‚ùå–°—Ç–∞–≤–∫–∞ - {money} üí≤ - x{stavka:.2f}‚ùå\n–õ–ï–¢–ï–õ–û –î–ûüöÄ : {x:.2f}"
            else: 
                return f"–û—à–∏–±–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—ã–ª–∏ –∑–∞–±—Ä–∞–Ω—ã"
        else:
            return f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"

class Randomgame:
    def __init__(self) -> None:
        pass
    def game(self, userid, money, stavka):
        randomchic = random.randint(1,6)
        if db.get_balance_info(userid) >= money:
            if stavka == "1-3" and randomchic <= 3:
                m = (money*5) - money
                db.add_balance(userid,(m))
                return f"‚úÖ–í–ê–®–ê –°–¢–ê–í–ö–ê –£–î–ê–ß–ù–ê–Ø‚úÖ\n‚úÖ–°—Ç–∞–≤–∫–∞ - {money} üí≤ - –ù–∞ –ø–æ–ª–æ–≤–∏–Ω—É 1-3‚úÖ\n–í–´–ò–ì–†–´–® : {m} üí≤"
            elif stavka == "3-6" and randomchic >= 3:
                m = (money*5) - money
                db.add_balance(userid,(m))
                return f"‚úÖ–í–ê–®–ê –°–¢–ê–í–ö–ê –£–î–ê–ß–ù–ê–Ø‚úÖ\n‚úÖ–°—Ç–∞–≤–∫–∞ - {money} üí≤ - –ù–∞ –ø–æ–ª–æ–≤–∏–Ω—É 3-6‚úÖ\n–í–´–ò–ì–†–´–® : {m} üí≤"
            elif stavka == "polovinka1" and randomchic >= 3:
                db.perform_transaction(userid, 20)
                return f"‚ùå–í–ê–®–ê –°–¢–ê–í–ö–ê –ù–ï–£–î–ê–ß–ù–ê–Ø‚ùå\n‚ùå–°—Ç–∞–≤–∫–∞ - {money} üí≤ - –ù–∞ –ø–æ–ª–æ–≤–∏–Ω—É 1-3‚ùå"
            elif stavka == "polovinka2" and randomchic <= 3:
                db.perform_transaction(userid, money)
                return f"‚ùå–í–ê–®–ê –°–¢–ê–í–ö–ê –ù–ï–£–î–ê–ß–ù–ê–Ø‚ùå\n‚ùå–°—Ç–∞–≤–∫–∞ - {money} üí≤ - –ù–∞ –ø–æ–ª–æ–≤–∏–Ω—É 3-6‚ùå"
            if str(stavka) == str(randomchic):
                m = (money*1.80) - money
                db.add_balance(userid,(m))
                return f"‚úÖ–í–ê–®–ê –°–¢–ê–í–ö–ê –£–î–ê–ß–ù–ê–Ø‚úÖ\n‚úÖ–°—Ç–∞–≤–∫–∞ - {money} üí≤ - –ù–∞ –û–¥–Ω–æ –∏–∑ —á–∏—Å–µ–ª‚úÖ\n–í–´–ò–ì–†–´–® : {m} üí≤"
            else:
                db.perform_transaction(userid, money)
                return f"‚ùå–í–ê–®–ê –°–¢–ê–í–ö–ê –ù–ï–£–î–ê–ß–ù–ê–Ø‚ùå\n‚ùå–°—Ç–∞–≤–∫–∞ - {money} üí≤ - –ù–∞ –û–¥–Ω–æ –∏–∑ —á–∏—Å–µ–ª‚ùå"
        else:
            return f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"

class Slotsgame:
    def __init__(self, slot=5):
        self.slot_num = slot
        self.result = []
        self.slots = {
            "üçå": 1, "üçä": 1, "üçí": 1, "üçç": 1, "üçì": 1,
            "ü•ù": 1, "üçê": 1, "üçë": 1, "üçè": 1,
            "üçá": 2, "ü•≠": 2, "üçé": 2, "üçã": 2, "üçâ": 2,
            "üò∫": 3, "üí•": 3, "üíØ": 3, "üí´": 3,
            "üî•": 4, "üéÅ": 4, "üíµ": 4,
            "üé∞": 5
        }
        self.weights = {
            "üçå": 10, "üçä": 10, "üçí": 10, "üçç": 10, "üçì": 10,
            "ü•ù": 10, "üçê": 10, "üçë": 10, "üçè": 10,
            "üçá": 8, "ü•≠": 8, "üçé": 8, "üçã": 8, "üçâ": 8,
            "üò∫": 5, "üí•": 5, "üíØ": 5, "üí´": 5,
            "üî•": 3, "üéÅ": 3, "üíµ": 3,
            "üé∞": 1
        }
        self.payouts = {
            1: {3: 1.50, 4: 2.00, 5: 5.00},  # –û–±—ã—á–Ω—ã–µ
            2: {3: 2.50, 4: 3.50, 5: 10.00},  # –†–µ–¥–∫–∏–µ
            3: {2: 2.50, 3: 5.00, 4: 7.50, 5: 10.50},  # –°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–µ
            4: {1: 5.00, 2: 7.50, 3: 10.50, 4: 25.00, 5: 100.00},  # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ
            5: {1: 10.00, 2: 25.00, 3: 100.00, 4: 250.00, 5: 1000.00}  # –ò–º–µ–Ω–Ω—ã–µ
        }

    def play(self, bet, user):
        self.result = random.choices(list(self.slots.keys()), weights=list(self.weights.values()), k=self.slot_num)
        sc = self.calculate_score(bet)
        if sc != 0:
            db.add_balance(user, int(sc))
            return f"‚úÖ–í–´ –≤—ã–π–≥—Ä–∞–ª–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç: |{'|'.join(self.result)}|\n–í—ã–∏–≥—Ä—ã—à: {int(sc)} üí≤‚úÖ"
        else:
            return f"‚ùå–í–´ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç: |{'|'.join(self.result)}‚ùå"
    
    def calculate_score(self, bet):
        score = 0
        for emoji, rarity in self.slots.items():
            count = self.result.count(emoji)
            if count in self.payouts[rarity]:
                score += self.payouts[rarity][count] * bet
        return score

