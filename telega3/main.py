from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
import asyncio
from aiogram import F
from aiogram.fsm.state import StatesGroup, State
import config
import casic
import money
import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
token = config.token
bot_username = "gandonica_bot"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=token)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
menu_kb = [
    [KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")],[KeyboardButton(text="–ö—É–ø–∏—Ç—å –≤–∏–ø")],
    [KeyboardButton(text="–ò–≥—Ä—ãüé∞üöÄ"), KeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥üé´")]
]
menu = ReplyKeyboardMarkup(keyboard=menu_kb, resize_keyboard=True, one_time_keyboard=True)

m_list = [
    [KeyboardButton(text="CrashüöÄ"), KeyboardButton(text="–°–ª–æ—Ç—ãüé∞")],
    [KeyboardButton(text="–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Äüé≤")],
    [KeyboardButton(text="–ú–µ–Ω—é")]
]
mkeyboard = ReplyKeyboardMarkup(keyboard=m_list, resize_keyboard=True, one_time_keyboard=True)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–≥—Ä—ã
db = money.PlayerDatabase()
crash = casic.Crash()
slots = casic.Slotsgame()
r = casic.Randomgame()
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Slotfsm(StatesGroup):
    pet = State()
    next = State()

class Randfsm(StatesGroup):
    pet = State()
    stavka = State()
    next = State()

class Crashfsm(StatesGroup):
    pet = State()
    x = State()
    next = State()

class Reg(StatesGroup):
    name = State()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
def generate_referral_link(bot_username, user_id):
    return f"https://t.me/{bot_username}?start={user_id}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_command_handler(message: Message, state: FSMContext):
    args = message.text.split()[1:]
    referrer_id = None

    if args:
        try:
            referrer_id = int(args[0])
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞.")
            return

    user_info = db.get_player_info(message.from_user.id)
    if user_info:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µü§ù, –Ω–∞ –∫–∞–∑–∏–Ω–æ BestWin | –°–∏–º—É–ª—è—Ç–æ—Ä –ö–∞–∑–∏–Ω–æ –∏ –°—Ç–∞–≤–æ–∫ üé∞", reply_markup=menu)
    else:
        await state.update_data(referrer_id=referrer_id)
        await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µü§ù, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫üé∞: ')
        await state.set_state(Reg.name)

@dp.message(Reg.name)
async def process_name(message: Message, state: FSMContext):
    player_name = message.text
    user_id = message.from_user.id

    data = await state.get_data()
    referrer_id = data.get('referrer_id')
    registration_result = db.register_player(user_id, player_name, referrer_id)

    if "—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å" in registration_result:
        db.add_balance(user_id, 100)
        await message.answer(
            f"{registration_result}\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 –º–æ–Ω–µ—Ç.",
            reply_markup=menu
        )

        if referrer_id:
            if db.get_player_info(referrer_id)['vip_status'] == "Premium üé∞":
                db.add_referral(referrer_id, user_id)
                db.add_balance(referrer_id, 300)
            else:
                db.add_referral(referrer_id, user_id)
                db.add_balance(referrer_id, 100)
    else:
        await message.answer(registration_result)

    await state.clear()

@dp.message(F.text == "–ö—É–ø–∏—Ç—å")
async def buy_command(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–µ–¥–µ–ª—è - 100‚ÇΩ")],
            [KeyboardButton(text="–ú–µ—Å—è—Ü - 150‚ÇΩ")],
            [KeyboardButton(text="–í—Å–µ–≥–¥–∞ - 200‚ÇΩ")],
            [KeyboardButton(text="–í—ã–π—Ç–∏")]
        ],
        resize_keyboard=True
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=keyboard)

async def give_money():
    while True:
        await asyncio.sleep(3600)
        db.give_vipmoney()

async def send_message_to_all():
    while True:
        await asyncio.sleep(3600)
        db.check_vip_time()

@dp.message(lambda message: message.text in ["–í—ã–π—Ç–∏"])
async def pon(message: types.Message):
    await message.answer("–í—ã –≤—ã—à–ª–∏ –≤ –º–µ–Ω—é", reply_markup=menu)
@dp.message(lambda message: message.text in ["–ù–µ–¥–µ–ª—è - 100‚ÇΩ", "–ú–µ—Å—è—Ü - 150‚ÇΩ", "–í—Å–µ–≥–¥–∞ - 200‚ÇΩ"])
async def process_subscription_choice(message: types.Message):
    choice = message.text
    prices = {
        '–ù–µ–¥–µ–ª—è - 100‚ÇΩ': types.LabeledPrice(label='–ù–µ–¥–µ–ª—è - 100‚ÇΩ', amount=10000),
        '–ú–µ—Å—è—Ü - 150‚ÇΩ': types.LabeledPrice(label='–ú–µ—Å—è—Ü - 150‚ÇΩ', amount=15000),
        '–í—Å–µ–≥–¥–∞ - 200‚ÇΩ': types.LabeledPrice(label='–í—Å–µ–≥–¥–∞ - 200‚ÇΩ', amount=20000)
    }
    await bot.send_invoice(
        message.chat.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞",
        description=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {choice}.",
        provider_token=config.YOOTOKEN,
        currency='RUB',
        prices=[prices[choice]],
        start_parameter='subscription-purchase',
        payload=choice
    )

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(lambda message: message.content_type == types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    subscription_type = message.successful_payment.invoice_payload
    purchase_time = datetime.datetime.now()
    your_function(subscription_type, purchase_time)
    await message.reply(f"{db.give_vip(message.from_user.id, subscription_type)}")

def your_function(subscription_type, purchase_time):
    logging.info(f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription_type}, –í—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {purchase_time}")

@dp.message(F.text == "–ú–µ–Ω—é")
async def menus(message: types.Message):
    if not db.get_player_info(message.from_user.id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=menu)

@dp.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    if not db.get_player_info(message.from_user.id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    user_id = message.from_user.id
    user_info = db.get_player_info(user_id)
    referrer_id = db.get_referrer(user_id)
    
    if referrer_id:
        referrer_info = db.get_player_info(referrer_id)
        referrer_text = (
            f"–ù–∏–∫: {referrer_info.get('nickname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, "
            f"–°—Ç–∞—Ç—É—Å: {referrer_info.get('vip_status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, "
        )
    else:
        referrer_text = "–ù–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞"
    
    referral_link = generate_referral_link(bot_username, message.from_user.id)

    user_info_text = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n"
        f"–í–∞—à ID: {message.from_user.id}\n"
        f"–í–∞—à VIP: {user_info.get('vip_status', '–°—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n"
        f"–í–∞—à —Ä–µ—Ñ–µ—Ä–µ—Ä: {referrer_text}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç: {user_info.get('balance', 0.0)}üí≤\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}\n"
    )
    await message.answer(user_info_text, reply_markup=menu)

kb_list = [
    [KeyboardButton(text="üìà –ù–∞—á–∞—Ç—å")],
    [KeyboardButton(text="üé´ –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É")],
    [KeyboardButton(text="üö™ –í—ã–π—Ç–∏")]
]
keyboard = ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True, one_time_keyboard=True)

@dp.message(F.text == "–ò–≥—Ä—ãüé∞üöÄ")
async def games(message: types.Message):
    if not db.get_player_info(message.from_user.id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=mkeyboard)

@dp.message(F.text == "CrashüöÄ")
async def with_puree(message: types.Message, state: FSMContext):
    if not db.get_player_info(message.from_user.id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É: ")
    await state.set_state(Crashfsm.pet)

@dp.message(F.text == "–°–ª–æ—Ç—ãüé∞")
async def with_puree(message: types.Message, state: FSMContext):
    if not db.get_player_info(message.from_user.id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É: ")
    await state.set_state(Slotfsm.pet)

@dp.message(F.text == "–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Äüé≤")
async def with_puree(message: types.Message, state: FSMContext):
    if not db.get_player_info(message.from_user.id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É: ")
    await state.set_state(Randfsm.pet)

@dp.message(Slotfsm.pet)
async def moneyfsmslot(message: Message, state: FSMContext):
    try:
        pet = int(message.text)
        await state.update_data(pet=pet)
        await state.set_state(Slotfsm.next)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=keyboard)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(Slotfsm.next)
async def startslot(message: Message, state: FSMContext):
    if message.text == "üìà –ù–∞—á–∞—Ç—å":
        data = await state.get_data()
        result = slots.play(int(data['pet']), user=message.from_user.id)
        await message.answer(result)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=keyboard)
    elif message.text == "üé´ –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É: ")
        await state.set_state(Slotfsm.pet)
    elif message.text == "üö™ –í—ã–π—Ç–∏":
        await state.clear()
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã –°–ª–æ—Ç—ãüé∞.", reply_markup=mkeyboard)

@dp.message(Randfsm.pet)
async def moneyfsmrand(message: Message, state: FSMContext):
    try:
        pet = int(message.text)
        await state.update_data(pet=pet)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞ —á—Ç–æ —Å—Ç–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-3, 3-6, 3, 5): ")
        await state.set_state(Randfsm.stavka)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(Randfsm.stavka)
async def stavkarand(message: Message, state: FSMContext):
    try:
        stavka = message.text
        await state.update_data(stavka=stavka)
        data = await state.get_data()
        await message.answer(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {data['pet']}, –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ {data['stavka']}x")
        await state.set_state(Randfsm.next)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=keyboard)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2.0")

@dp.message(Randfsm.next)
async def startrand(message: Message, state: FSMContext):
    if message.text == "üìà –ù–∞—á–∞—Ç—å":
        data = await state.get_data()
        result = r.game(money=int(data["pet"]), stavka=data["stavka"], userid=message.from_user.id)
        await message.answer(result)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=keyboard)
    elif message.text == "üé´ –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É: ")
        await state.set_state(Randfsm.pet)
    elif message.text == "üö™ –í—ã–π—Ç–∏":
        await state.clear()
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Äüé≤.", reply_markup=mkeyboard)

@dp.message(Crashfsm.pet)
async def moneyfsmcrash(message: Message, state: FSMContext):
    try:
        pet = int(message.text)
        await state.update_data(pet=pet)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.0): ")
        await state.set_state(Crashfsm.x)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(Crashfsm.x)
async def stavka(message: Message, state: FSMContext):
    try:
        stavka = float(message.text)
        await state.update_data(stavka=stavka)
        data = await state.get_data()
        await message.answer(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {data['pet']}, –º–Ω–æ–∂–∏—Ç–µ–ª—å {data['stavka']}x")
        await state.set_state(Crashfsm.next)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=keyboard)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2.0")

@dp.message(Crashfsm.next)
async def startcrash(message: Message, state: FSMContext):
    if message.text == "üìà –ù–∞—á–∞—Ç—å":
        data = await state.get_data()
        result = crash.crash(money=int(data["pet"]), stavka=float(data["stavka"]), user=message.from_user.id)
        await message.answer(result)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=keyboard)
    elif message.text == "üé´ –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É: ")
        await state.set_state(Crashfsm.pet)
    elif message.text == "üö™ –í—ã–π—Ç–∏":
        await state.clear()
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã CrashüöÄ.", reply_markup=mkeyboard)

async def main():
    asyncio.create_task(give_money())
    asyncio.create_task(send_message_to_all())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
